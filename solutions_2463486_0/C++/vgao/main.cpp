#include <cstdlib>
#include <cstdio>
#include <cstring>

struct bigNum
{
	int len;
	char s[64];
};

bigNum num[3000];

typedef int (*cmpFunc)(const void *, const void *);
int cmp(bigNum *a, bigNum *b)
{
	//printf("Cmp %s[%d], %s[%d] str %d\n", a->s, a->len, b->s, b->len,  strcmp(a->s, b->s));
	if (a->len<b->len)
		return -1;
	else if (a->len>b->len)
		return 1;
	
	return strcmp(a->s, b->s);
}

int main()
{
	freopen("input.txt", "r", stdin);   
	// "input.txt" is the table contains numbers which are considered fair and square.
	// Generated by another two programs written in C++ and java(BigInteger :P).
	// All numbers have already been sorted.
	freopen("output.txt", "w", stdout);
	int n; scanf("%d", &n);
	for(int i=0; i<n; i++) {
		scanf("%s", num[i].s);
		num[i].len=strlen(num[i].s);
	}
	int t; scanf("%d", &t);
	for(int i=0; i<t; i++) {
		bigNum l, r;
		scanf("%s", l.s);
		l.len=strlen(l.s);
		scanf("%s", r.s);
		r.len=strlen(r.s);
		//printf("Find [%s, %s]\n", l.s, r.s);
		int j, k;
		for(j=0; j<n; j++)
			if (cmp(&num[j], &l)>=0)
				break;
		for(k=j; k<n; k++) {
			int res=cmp(&r, &num[k]);
			if (res==0)
				break;
			else if (res<0) {
				k--;
				break;
			}
		}
		//printf("[(j=%d):%s, (k=%d):%s]\n", j, num[j].s, k, num[k].s);
		printf("Case #%d: %d\n", i+1, k-j+1);
		//printf("\n\n");
	}

	return 0;
}