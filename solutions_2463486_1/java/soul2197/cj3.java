import java.io.File;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class cj3 {
  public static List<BigInteger> nums = new ArrayList<>();
  static {
    nums.add(new BigInteger("1"));
    nums.add(new BigInteger("4"));
    nums.add(new BigInteger("9"));
    nums.add(new BigInteger("121"));
    nums.add(new BigInteger("484"));
    nums.add(new BigInteger("10201"));
    nums.add(new BigInteger("12321"));
    nums.add(new BigInteger("14641"));
    nums.add(new BigInteger("40804"));
    nums.add(new BigInteger("44944"));
    nums.add(new BigInteger("1002001"));
    nums.add(new BigInteger("1234321"));
    nums.add(new BigInteger("4008004"));
    nums.add(new BigInteger("100020001"));
    nums.add(new BigInteger("102030201"));
    nums.add(new BigInteger("104060401"));
    nums.add(new BigInteger("121242121"));
    nums.add(new BigInteger("123454321"));
    nums.add(new BigInteger("125686521"));
    nums.add(new BigInteger("400080004"));
    nums.add(new BigInteger("404090404"));
    nums.add(new BigInteger("10000200001"));
    nums.add(new BigInteger("10221412201"));
    nums.add(new BigInteger("12102420121"));
    nums.add(new BigInteger("12345654321"));
    nums.add(new BigInteger("40000800004"));
    nums.add(new BigInteger("1000002000001"));
    nums.add(new BigInteger("1002003002001"));
    nums.add(new BigInteger("1004006004001"));
    nums.add(new BigInteger("1020304030201"));
    nums.add(new BigInteger("1022325232201"));
    nums.add(new BigInteger("1024348434201"));
    nums.add(new BigInteger("1210024200121"));
    nums.add(new BigInteger("1212225222121"));
    nums.add(new BigInteger("1214428244121"));
    nums.add(new BigInteger("1232346432321"));
    nums.add(new BigInteger("1234567654321"));
    nums.add(new BigInteger("4000008000004"));
    nums.add(new BigInteger("4004009004004"));
    nums.add(new BigInteger("100000020000001"));
    nums.add(new BigInteger("100220141022001"));
    nums.add(new BigInteger("102012040210201"));
    nums.add(new BigInteger("102234363432201"));
    nums.add(new BigInteger("121000242000121"));
    nums.add(new BigInteger("121242363242121"));
    nums.add(new BigInteger("123212464212321"));
    nums.add(new BigInteger("123456787654321"));
    nums.add(new BigInteger("400000080000004"));
    nums.add(new BigInteger("10000000200000001"));
    nums.add(new BigInteger("10002000300020001"));
    nums.add(new BigInteger("10004000600040001"));
    nums.add(new BigInteger("10020210401202001"));
    nums.add(new BigInteger("10022212521222001"));
    nums.add(new BigInteger("10024214841242001"));
    nums.add(new BigInteger("10201020402010201"));
    nums.add(new BigInteger("10203040504030201"));
    nums.add(new BigInteger("10205060806050201"));
    nums.add(new BigInteger("10221432623412201"));
    nums.add(new BigInteger("10223454745432201"));
    nums.add(new BigInteger("12100002420000121"));
    nums.add(new BigInteger("12102202520220121"));
    nums.add(new BigInteger("12104402820440121"));
    nums.add(new BigInteger("12122232623222121"));
    nums.add(new BigInteger("12124434743442121"));
    nums.add(new BigInteger("12321024642012321"));
    nums.add(new BigInteger("12323244744232321"));
    nums.add(new BigInteger("12343456865434321"));
    nums.add(new BigInteger("12345678987654321"));
    nums.add(new BigInteger("40000000800000004"));
    nums.add(new BigInteger("40004000900040004"));
    nums.add(new BigInteger("1000000002000000001"));
    nums.add(new BigInteger("1000220014100220001"));
    nums.add(new BigInteger("1002003004003002001"));
    nums.add(new BigInteger("1002223236323222001"));
    nums.add(new BigInteger("1020100204020010201"));
    nums.add(new BigInteger("1020322416142230201"));
    nums.add(new BigInteger("1022123226223212201"));
    nums.add(new BigInteger("1022345658565432201"));
    nums.add(new BigInteger("1210000024200000121"));
    nums.add(new BigInteger("1210242036302420121"));
    nums.add(new BigInteger("1212203226223022121"));
    nums.add(new BigInteger("1212445458545442121"));
    nums.add(new BigInteger("1232100246420012321"));
    nums.add(new BigInteger("1232344458544432321"));
    nums.add(new BigInteger("1234323468643234321"));
    nums.add(new BigInteger("4000000008000000004"));
    nums.add(new BigInteger("100000000020000000001"));
    nums.add(new BigInteger("100002000030000200001"));
    nums.add(new BigInteger("100004000060000400001"));
    nums.add(new BigInteger("100020201040102020001"));
    nums.add(new BigInteger("100022201252102220001"));
    nums.add(new BigInteger("100024201484102420001"));
    nums.add(new BigInteger("100200120040021002001"));
    nums.add(new BigInteger("100202122050221202001"));
    nums.add(new BigInteger("100204124080421402001"));
    nums.add(new BigInteger("100220341262143022001"));
    nums.add(new BigInteger("100222343474343222001"));
    nums.add(new BigInteger("102010002040200010201"));
    nums.add(new BigInteger("102012022050220210201"));
    nums.add(new BigInteger("102014042080240410201"));
    nums.add(new BigInteger("102030405060504030201"));
    nums.add(new BigInteger("102032425272524230201"));
    nums.add(new BigInteger("102212122262221212201"));
    nums.add(new BigInteger("102214144272441412201"));
    nums.add(new BigInteger("102232545484545232201"));
    nums.add(new BigInteger("102234567696765432201"));
    nums.add(new BigInteger("121000000242000000121"));
    nums.add(new BigInteger("121002200252002200121"));
    nums.add(new BigInteger("121004400282004400121"));
    nums.add(new BigInteger("121022221262122220121"));
    nums.add(new BigInteger("121024421474124420121"));
    nums.add(new BigInteger("121220122262221022121"));
    nums.add(new BigInteger("121222324272423222121"));
    nums.add(new BigInteger("121242363484363242121"));
    nums.add(new BigInteger("121244565696565442121"));
    nums.add(new BigInteger("123210002464200012321"));
    nums.add(new BigInteger("123212222474222212321"));
    nums.add(new BigInteger("123232425484524232321"));
    nums.add(new BigInteger("123234645696546432321"));
    nums.add(new BigInteger("123432124686421234321"));
    nums.add(new BigInteger("123434346696643434321"));
    nums.add(new BigInteger("400000000080000000004"));
    nums.add(new BigInteger("400004000090000400004"));
    nums.add(new BigInteger("10000000000200000000001"));
    nums.add(new BigInteger("10000220001410002200001"));
    nums.add(new BigInteger("10002002100400120020001"));
    nums.add(new BigInteger("10002222123632122220001"));
    nums.add(new BigInteger("10020010200400201002001"));
    nums.add(new BigInteger("10020230421612403202001"));
    nums.add(new BigInteger("10022014302620341022001"));
    nums.add(new BigInteger("10022234545854543222001"));
    nums.add(new BigInteger("10201000020402000010201"));
    nums.add(new BigInteger("10201222221612222210201"));
    nums.add(new BigInteger("10203022140604122030201"));
    nums.add(new BigInteger("10203244363836344230201"));
    nums.add(new BigInteger("10221210222622201212201"));
    nums.add(new BigInteger("10221432643834623412201"));
    nums.add(new BigInteger("10223234344844343232201"));
    nums.add(new BigInteger("12100000002420000000121"));
    nums.add(new BigInteger("12100242003630024200121"));
    nums.add(new BigInteger("12102202302620320220121"));
    nums.add(new BigInteger("12102444325852344420121"));
    nums.add(new BigInteger("12122010222622201022121"));
    nums.add(new BigInteger("12122252443834425222121"));
    nums.add(new BigInteger("12124214524842541242121"));
    nums.add(new BigInteger("12321000024642000012321"));
    nums.add(new BigInteger("12321244225852244212321"));
    nums.add(new BigInteger("12323222344844322232321"));
    nums.add(new BigInteger("12343210246864201234321"));
    nums.add(new BigInteger("40000000000800000000004"));
    nums.add(new BigInteger("1000000000002000000000001"));
    nums.add(new BigInteger("1000002000003000002000001"));
    nums.add(new BigInteger("1000004000006000004000001"));
    nums.add(new BigInteger("1000020200104010020200001"));
    nums.add(new BigInteger("1000022200125210022200001"));
    nums.add(new BigInteger("1000024200148410024200001"));
    nums.add(new BigInteger("1000200030004000300020001"));
    nums.add(new BigInteger("1000202030205020302020001"));
    nums.add(new BigInteger("1000204030408040304020001"));
    nums.add(new BigInteger("1000220232126212320220001"));
    nums.add(new BigInteger("1000222232347432322220001"));
    nums.add(new BigInteger("1002001002004002001002001"));
    nums.add(new BigInteger("1002003004005004003002001"));
    nums.add(new BigInteger("1002005006008006005002001"));
    nums.add(new BigInteger("1002021222306032221202001"));
    nums.add(new BigInteger("1002023224327234223202001"));
    nums.add(new BigInteger("1002201232026202321022001"));
    nums.add(new BigInteger("1002203234227224323022001"));
    nums.add(new BigInteger("1002221454348434541222001"));
    nums.add(new BigInteger("1002223456569656543222001"));
    nums.add(new BigInteger("1020100000204020000010201"));
    nums.add(new BigInteger("1020102020205020202010201"));
    nums.add(new BigInteger("1020104040208020404010201"));
    nums.add(new BigInteger("1020120402306032040210201"));
    nums.add(new BigInteger("1020122422327232242210201"));
    nums.add(new BigInteger("1020302030406040302030201"));
    nums.add(new BigInteger("1020304050607060504030201"));
    nums.add(new BigInteger("1020322434528254342230201"));
    nums.add(new BigInteger("1020324454749474544230201"));
    nums.add(new BigInteger("1022121002226222001212201"));
    nums.add(new BigInteger("1022123024227224203212201"));
    nums.add(new BigInteger("1022141424528254241412201"));
    nums.add(new BigInteger("1022143446549456443412201"));
    nums.add(new BigInteger("1022323232448442323232201"));
    nums.add(new BigInteger("1022325254649464525232201"));
    nums.add(new BigInteger("1210000000024200000000121"));
    nums.add(new BigInteger("1210002200025200022000121"));
    nums.add(new BigInteger("1210004400028200044000121"));
    nums.add(new BigInteger("1210022220126210222200121"));
    nums.add(new BigInteger("1210024420147410244200121"));
    nums.add(new BigInteger("1210220032026202300220121"));
    nums.add(new BigInteger("1210222232227222322220121"));
    nums.add(new BigInteger("1210242254148414522420121"));
    nums.add(new BigInteger("1210244454369634544420121"));
    nums.add(new BigInteger("1212201002226222001022121"));
    nums.add(new BigInteger("1212203204227224023022121"));
    nums.add(new BigInteger("1212223242528252423222121"));
    nums.add(new BigInteger("1212225444549454445222121"));
    nums.add(new BigInteger("1212421234248424321242121"));
    nums.add(new BigInteger("1212423436449446343242121"));
    nums.add(new BigInteger("1232100000246420000012321"));
    nums.add(new BigInteger("1232102220247420222012321"));
    nums.add(new BigInteger("1232122422348432242212321"));
    nums.add(new BigInteger("1232124642369632464212321"));
    nums.add(new BigInteger("1232322032448442302232321"));
    nums.add(new BigInteger("1232324252649462524232321"));
    nums.add(new BigInteger("1234321002468642001234321"));
    nums.add(new BigInteger("1234323224469644223234321"));
    nums.add(new BigInteger("4000000000008000000000004"));
    nums.add(new BigInteger("4000004000009000004000004"));
    nums.add(new BigInteger("100000000000020000000000001"));
    nums.add(new BigInteger("100000220000141000022000001"));
    nums.add(new BigInteger("100002002010040010200200001"));
    nums.add(new BigInteger("100002222012363210222200001"));
    nums.add(new BigInteger("100020001200040002100020001"));
    nums.add(new BigInteger("100020221222161222122020001"));
    nums.add(new BigInteger("100022003410262014300220001"));
    nums.add(new BigInteger("100022223434585434322220001"));
    nums.add(new BigInteger("100200100020040020001002001"));
    nums.add(new BigInteger("100200320240161042023002001"));
    nums.add(new BigInteger("100202104032060230401202001"));
    nums.add(new BigInteger("100202324254383452423202001"));
    nums.add(new BigInteger("100220121220262022121022001"));
    nums.add(new BigInteger("100220341462383264143022001"));
    nums.add(new BigInteger("100222125432484234521222001"));
    nums.add(new BigInteger("102010000002040200000010201"));
    nums.add(new BigInteger("102010222202161202222010201"));
    nums.add(new BigInteger("102012022032060230220210201"));
    nums.add(new BigInteger("102012244234383432442210201"));
    nums.add(new BigInteger("102030201204060402102030201"));
    nums.add(new BigInteger("102030423426181624324030201"));
    nums.add(new BigInteger("102032223434282434322230201"));
    nums.add(new BigInteger("102212100022262220001212201"));
    nums.add(new BigInteger("102212322442383244223212201"));
    nums.add(new BigInteger("102214124054282450421412201"));
    nums.add(new BigInteger("102232321224484422123232201"));
    nums.add(new BigInteger("121000000000242000000000121"));
    nums.add(new BigInteger("121000242000363000242000121"));
    nums.add(new BigInteger("121002202210262012202200121"));
    nums.add(new BigInteger("121002444212585212444200121"));
    nums.add(new BigInteger("121022001220262022100220121"));
    nums.add(new BigInteger("121022243242383242342220121"));
    nums.add(new BigInteger("121024203630484036302420121"));
    nums.add(new BigInteger("121220100022262220001022121"));
    nums.add(new BigInteger("121220342242383242243022121"));
    nums.add(new BigInteger("121222304234282432403222121"));
    nums.add(new BigInteger("121242121242484242121242121"));
    nums.add(new BigInteger("123210000002464200000012321"));
    nums.add(new BigInteger("123210244202585202442012321"));
    nums.add(new BigInteger("123212222232484232222212321"));
    nums.add(new BigInteger("123232201224484422102232321"));
    nums.add(new BigInteger("123432100024686420001234321"));
    nums.add(new BigInteger("400000000000080000000000004"));
  }

  public static void main(String[] args) throws Exception {
    final Scanner scanner = new Scanner(new File("D:\\unsorted\\in.txt"));
    final int T = scanner.nextInt();
    for (int t = 1; t <= T; t++) {
      final BigInteger A = scanner.nextBigInteger(), B = scanner.nextBigInteger();
      int count = 0;
      for (BigInteger num : nums) {
        if (num.compareTo(A) >= 0 && num.compareTo(B) <= 0)
          count++;
      }
      System.out.println("Case #" + t + ": " + count);
    }
  }
}
