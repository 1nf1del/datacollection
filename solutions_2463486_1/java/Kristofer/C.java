import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class C {
    // From http://oeis.org/A057135/b057135.txt
    private static final String KNOWN = "1 0\n" +
            "2 1\n" +
            "3 2\n" +
            "4 3\n" +
            "5 11\n" +
            "6 22\n" +
            "7 101\n" +
            "8 111\n" +
            "9 121\n" +
            "10 202\n" +
            "11 212\n" +
            "12 1001\n" +
            "13 1111\n" +
            "14 2002\n" +
            "15 10001\n" +
            "16 10101\n" +
            "17 10201\n" +
            "18 11011\n" +
            "19 11111\n" +
            "20 11211\n" +
            "21 20002\n" +
            "22 20102\n" +
            "23 100001\n" +
            "24 101101\n" +
            "25 110011\n" +
            "26 111111\n" +
            "27 200002\n" +
            "28 1000001\n" +
            "29 1001001\n" +
            "30 1002001\n" +
            "31 1010101\n" +
            "32 1011101\n" +
            "33 1012101\n" +
            "34 1100011\n" +
            "35 1101011\n" +
            "36 1102011\n" +
            "37 1110111\n" +
            "38 1111111\n" +
            "39 2000002\n" +
            "40 2001002\n" +
            "41 10000001\n" +
            "42 10011001\n" +
            "43 10100101\n" +
            "44 10111101\n" +
            "45 11000011\n" +
            "46 11011011\n" +
            "47 11100111\n" +
            "48 11111111\n" +
            "49 20000002\n" +
            "50 100000001\n" +
            "51 100010001\n" +
            "52 100020001\n" +
            "53 100101001\n" +
            "54 100111001\n" +
            "55 100121001\n" +
            "56 101000101\n" +
            "57 101010101\n" +
            "58 101020101\n" +
            "59 101101101\n" +
            "60 101111101\n" +
            "61 110000011\n" +
            "62 110010011\n" +
            "63 110020011\n" +
            "64 110101011\n" +
            "65 110111011\n" +
            "66 111000111\n" +
            "67 111010111\n" +
            "68 111101111\n" +
            "69 111111111\n" +
            "70 200000002\n" +
            "71 200010002\n" +
            "72 1000000001\n" +
            "73 1000110001\n" +
            "74 1001001001\n" +
            "75 1001111001\n" +
            "76 1010000101\n" +
            "77 1010110101\n" +
            "78 1011001101\n" +
            "79 1011111101\n" +
            "80 1100000011\n" +
            "81 1100110011\n" +
            "82 1101001011\n" +
            "83 1101111011\n" +
            "84 1110000111\n" +
            "85 1110110111\n" +
            "86 1111001111\n" +
            "87 2000000002\n" +
            "88 10000000001\n" +
            "89 10000100001\n" +
            "90 10000200001\n" +
            "91 10001010001\n" +
            "92 10001110001\n" +
            "93 10001210001\n" +
            "94 10010001001\n" +
            "95 10010101001\n" +
            "96 10010201001\n" +
            "97 10011011001\n" +
            "98 10011111001\n" +
            "99 10100000101\n" +
            "100 10100100101\n" +
            "101 10100200101\n" +
            "102 10101010101\n" +
            "103 10101110101\n" +
            "104 10110001101\n" +
            "105 10110101101\n" +
            "106 10111011101\n" +
            "107 10111111101\n" +
            "108 11000000011\n" +
            "109 11000100011\n" +
            "110 11000200011\n" +
            "111 11001010011\n" +
            "112 11001110011\n" +
            "113 11010001011\n" +
            "114 11010101011\n" +
            "115 11011011011\n" +
            "116 11011111011\n" +
            "117 11100000111\n" +
            "118 11100100111\n" +
            "119 11101010111\n" +
            "120 11101110111\n" +
            "121 11110001111\n" +
            "122 11110101111\n" +
            "123 20000000002\n" +
            "124 20000100002\n" +
            "125 100000000001\n" +
            "126 100001100001\n" +
            "127 100010010001\n" +
            "128 100011110001\n" +
            "129 100100001001\n" +
            "130 100101101001\n" +
            "131 100110011001\n" +
            "132 100111111001\n" +
            "133 101000000101\n" +
            "134 101001100101\n" +
            "135 101010010101\n" +
            "136 101011110101\n" +
            "137 101100001101\n" +
            "138 101101101101\n" +
            "139 101110011101\n" +
            "140 110000000011\n" +
            "141 110001100011\n" +
            "142 110010010011\n" +
            "143 110011110011\n" +
            "144 110100001011\n" +
            "145 110101101011\n" +
            "146 110110011011\n" +
            "147 111000000111\n" +
            "148 111001100111\n" +
            "149 111010010111\n" +
            "150 111100001111\n" +
            "151 200000000002\n" +
            "152 1000000000001\n" +
            "153 1000001000001\n" +
            "154 1000002000001\n" +
            "155 1000010100001\n" +
            "156 1000011100001\n" +
            "157 1000012100001\n" +
            "158 1000100010001\n" +
            "159 1000101010001\n" +
            "160 1000102010001\n" +
            "161 1000110110001\n" +
            "162 1000111110001\n" +
            "163 1001000001001\n" +
            "164 1001001001001\n" +
            "165 1001002001001\n" +
            "166 1001010101001\n" +
            "167 1001011101001\n" +
            "168 1001100011001\n" +
            "169 1001101011001\n" +
            "170 1001110111001\n" +
            "171 1001111111001\n" +
            "172 1010000000101\n" +
            "173 1010001000101\n" +
            "174 1010002000101\n" +
            "175 1010010100101\n" +
            "176 1010011100101\n" +
            "177 1010100010101\n" +
            "178 1010101010101\n" +
            "179 1010110110101\n" +
            "180 1010111110101\n" +
            "181 1011000001101\n" +
            "182 1011001001101\n" +
            "183 1011010101101\n" +
            "184 1011011101101\n" +
            "185 1011100011101\n" +
            "186 1011101011101\n" +
            "187 1100000000011\n" +
            "188 1100001000011\n" +
            "189 1100002000011\n" +
            "190 1100010100011\n" +
            "191 1100011100011\n" +
            "192 1100100010011\n" +
            "193 1100101010011\n" +
            "194 1100110110011\n" +
            "195 1100111110011\n" +
            "196 1101000001011\n" +
            "197 1101001001011\n" +
            "198 1101010101011\n" +
            "199 1101011101011\n" +
            "200 1101100011011\n" +
            "201 1101101011011\n" +
            "202 1110000000111\n" +
            "203 1110001000111\n" +
            "204 1110010100111\n" +
            "205 1110011100111\n" +
            "206 1110100010111\n" +
            "207 1110101010111\n" +
            "208 1111000001111\n" +
            "209 1111001001111\n" +
            "210 2000000000002\n" +
            "211 2000001000002\n" +
            "212 10000000000001\n" +
            "213 10000011000001\n" +
            "214 10000100100001\n" +
            "215 10000111100001\n" +
            "216 10001000010001\n" +
            "217 10001011010001\n" +
            "218 10001100110001\n" +
            "219 10001111110001\n" +
            "220 10010000001001\n" +
            "221 10010011001001\n" +
            "222 10010100101001\n" +
            "223 10010111101001\n" +
            "224 10011000011001\n" +
            "225 10011011011001\n" +
            "226 10011100111001\n" +
            "227 10100000000101\n" +
            "228 10100011000101\n" +
            "229 10100100100101\n" +
            "230 10100111100101\n" +
            "231 10101000010101\n" +
            "232 10101011010101\n" +
            "233 10101100110101\n" +
            "234 10110000001101\n" +
            "235 10110011001101\n" +
            "236 10110100101101\n" +
            "237 10111000011101\n" +
            "238 11000000000011\n" +
            "239 11000011000011\n" +
            "240 11000100100011\n" +
            "241 11000111100011\n" +
            "242 11001000010011\n" +
            "243 11001011010011\n" +
            "244 11001100110011\n" +
            "245 11010000001011\n" +
            "246 11010011001011\n" +
            "247 11010100101011\n" +
            "248 11011000011011\n" +
            "249 11100000000111\n" +
            "250 11100011000111\n" +
            "251 11100100100111\n" +
            "252 11101000010111\n" +
            "253 11110000001111\n" +
            "254 20000000000002\n" +
            "255 100000000000001\n" +
            "256 100000010000001\n" +
            "257 100000020000001\n" +
            "258 100000101000001\n" +
            "259 100000111000001\n" +
            "260 100000121000001\n" +
            "261 100001000100001\n" +
            "262 100001010100001\n" +
            "263 100001020100001\n" +
            "264 100001101100001\n" +
            "265 100001111100001\n" +
            "266 100010000010001\n" +
            "267 100010010010001\n" +
            "268 100010020010001\n" +
            "269 100010101010001\n" +
            "270 100010111010001\n" +
            "271 100011000110001\n" +
            "272 100011010110001\n" +
            "273 100011101110001\n" +
            "274 100011111110001\n" +
            "275 100100000001001\n" +
            "276 100100010001001\n" +
            "277 100100020001001\n" +
            "278 100100101001001\n" +
            "279 100100111001001\n" +
            "280 100101000101001\n" +
            "281 100101010101001\n" +
            "282 100101101101001\n" +
            "283 100101111101001\n" +
            "284 100110000011001\n" +
            "285 100110010011001\n" +
            "286 100110101011001\n" +
            "287 100110111011001\n" +
            "288 100111000111001\n" +
            "289 100111010111001\n" +
            "290 101000000000101\n" +
            "291 101000010000101\n" +
            "292 101000020000101\n" +
            "293 101000101000101\n" +
            "294 101000111000101\n" +
            "295 101001000100101\n" +
            "296 101001010100101\n" +
            "297 101001101100101\n" +
            "298 101001111100101\n" +
            "299 101010000010101\n" +
            "300 101010010010101\n" +
            "301 101010101010101\n" +
            "302 101010111010101\n" +
            "303 101011000110101\n" +
            "304 101011010110101\n" +
            "305 101100000001101\n" +
            "306 101100010001101\n" +
            "307 101100101001101\n" +
            "308 101100111001101\n" +
            "309 101101000101101\n" +
            "310 101101010101101\n" +
            "311 101110000011101\n" +
            "312 101110010011101\n" +
            "313 110000000000011\n" +
            "314 110000010000011\n" +
            "315 110000020000011\n" +
            "316 110000101000011\n" +
            "317 110000111000011\n" +
            "318 110001000100011\n" +
            "319 110001010100011\n" +
            "320 110001101100011\n" +
            "321 110001111100011\n" +
            "322 110010000010011\n" +
            "323 110010010010011\n" +
            "324 110010101010011\n" +
            "325 110010111010011\n" +
            "326 110011000110011\n" +
            "327 110011010110011\n" +
            "328 110100000001011\n" +
            "329 110100010001011\n" +
            "330 110100101001011\n" +
            "331 110100111001011\n" +
            "332 110101000101011\n" +
            "333 110101010101011\n" +
            "334 110110000011011\n" +
            "335 110110010011011\n" +
            "336 111000000000111\n" +
            "337 111000010000111\n" +
            "338 111000101000111\n" +
            "339 111000111000111\n" +
            "340 111001000100111\n" +
            "341 111001010100111\n" +
            "342 111010000010111\n" +
            "343 111010010010111\n" +
            "344 111100000001111\n" +
            "345 111100010001111\n" +
            "346 200000000000002\n" +
            "347 200000010000002\n" +
            "348 1000000000000001\n" +
            "349 1000000110000001\n" +
            "350 1000001001000001\n" +
            "351 1000001111000001\n" +
            "352 1000010000100001\n" +
            "353 1000010110100001\n" +
            "354 1000011001100001\n" +
            "355 1000011111100001\n" +
            "356 1000100000010001\n" +
            "357 1000100110010001\n" +
            "358 1000101001010001\n" +
            "359 1000101111010001\n" +
            "360 1000110000110001\n" +
            "361 1000110110110001\n" +
            "362 1000111001110001\n" +
            "363 1001000000001001\n" +
            "364 1001000110001001\n" +
            "365 1001001001001001\n" +
            "366 1001001111001001\n" +
            "367 1001010000101001\n" +
            "368 1001010110101001\n" +
            "369 1001011001101001\n" +
            "370 1001100000011001\n" +
            "371 1001100110011001\n" +
            "372 1001101001011001\n" +
            "373 1001110000111001\n" +
            "374 1010000000000101\n" +
            "375 1010000110000101\n" +
            "376 1010001001000101\n" +
            "377 1010001111000101\n" +
            "378 1010010000100101\n" +
            "379 1010010110100101\n" +
            "380 1010011001100101\n" +
            "381 1010100000010101\n" +
            "382 1010100110010101\n" +
            "383 1010101001010101\n" +
            "384 1010110000110101\n" +
            "385 1011000000001101\n" +
            "386 1011000110001101\n" +
            "387 1011001001001101\n" +
            "388 1011010000101101\n" +
            "389 1011100000011101\n" +
            "390 1100000000000011\n" +
            "391 1100000110000011\n" +
            "392 1100001001000011\n" +
            "393 1100001111000011\n" +
            "394 1100010000100011\n" +
            "395 1100010110100011\n" +
            "396 1100011001100011\n" +
            "397 1100100000010011\n" +
            "398 1100100110010011\n" +
            "399 1100101001010011\n" +
            "400 1100110000110011\n" +
            "401 1101000000001011\n" +
            "402 1101000110001011\n" +
            "403 1101001001001011\n" +
            "404 1101010000101011\n" +
            "405 1101100000011011\n" +
            "406 1110000000000111\n" +
            "407 1110000110000111\n" +
            "408 1110001001000111\n" +
            "409 1110010000100111\n" +
            "410 1110100000010111\n" +
            "411 1111000000001111\n" +
            "412 2000000000000002\n";

    private static final TreeMap<BigInteger, Integer> KNOWN2;
    static {
        KNOWN2 = new TreeMap<BigInteger, Integer>();
        String[] split = KNOWN.split("\n");
        int count = 0;
        for (String s : split) {
            String[] strings = s.split(" ");
            BigInteger n2 = new BigInteger(strings[1]);
            n2 = n2.multiply(n2);
            KNOWN2.put(n2, count++);
        }
    }
    private static final boolean SINGLE_THREADED = true;

    private static String FILENAME = null;
    static {
        FILENAME = "C-sample";
        //FILENAME = "C-small-attempt0";
        FILENAME = "C-large-1";
    }

    public static void main(String[] args) {
        new C().run();
    }

    private PrintStream out;
    private final BufferedReader reader;
    private StringTokenizer tokenizer = new StringTokenizer("");

    public C() {
        try {
            if (FILENAME == null) {
                out = System.out;
                reader = new BufferedReader(new InputStreamReader(System.in));
            } else {
                out = new PrintStream(new FileOutputStream("source/" + FILENAME + ".out"));
                reader = new BufferedReader(new FileReader("source/" + FILENAME + ".in"));
            }
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public void run() {
        try {
            runCases();
        } finally {
            out.close();
        }
    }

    public void debug(String s, Object... args) {
        System.err.printf("DEBUG: " + s + "\n", args);
    }

    private void runCases() {
        int numProcs = Runtime.getRuntime().availableProcessors();
        debug("num processors: %d", numProcs);
        ExecutorService service = Executors.newFixedThreadPool(numProcs);
        try {
            int cases = getInt();
            ArrayList<Future<String>> list = new ArrayList<Future<String>>();
            for (int c = 1; c <= cases; c++) {
                if (!SINGLE_THREADED) {
                    Solver solver = new Solver(c);
                    list.add(service.submit(solver));
                }
            }
            for (int c = 1; c <= cases; c++) {
                try {
                    String answer;
                    if (SINGLE_THREADED) {
                        answer = new Solver(c).call();
                    } else {
                        Future<String> future = list.get(c - 1);
                        answer = future.get();
                    }
                    String s = "Case #" + c + ": " + answer;
                    out.println(s);
                    if (out != System.out) {
                        System.out.println(s);
                    }
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } finally {
            service.shutdown();
            debug("done with all!");
        }
    }

    public String readLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public String getToken() {
        while (true) {
            if (tokenizer.hasMoreTokens()) {
                return tokenizer.nextToken();
            }
            String s = readLine();
            if (s == null) {
                return null;
            }
            tokenizer = new StringTokenizer(s, " \t\n\r");
        }
    }

    public double getDouble() {
        return Double.parseDouble(getToken());
    }

    public int getInt() {
        return Integer.parseInt(getToken());
    }

    public long getLong() {
        return Long.parseLong(getToken());
    }

    public BigInteger getBigInt() {
        return new BigInteger(getToken());
    }

    public BigDecimal getBigDec() {
        return new BigDecimal(getToken());
    }

    public class Solver implements Callable<String> {

        private final BigInteger a;
        private final BigInteger b;
        private final int caseNumber;

        // Do all input reading here!!
        public Solver(int caseNumber) {
            this.caseNumber = caseNumber;
            a = getBigInt();
            b = getBigInt();
        }

        // Do no reading here! This is run async!
        // Solve the actual problem here
        public String call() throws Exception {
            debug("solving case %d", caseNumber);
            Map.Entry<BigInteger, Integer> lower = KNOWN2.ceilingEntry(a);
            Map.Entry<BigInteger, Integer> upper = KNOWN2.floorEntry(b);
            if (lower.getKey().compareTo(upper.getKey()) > 0) {
                return "0";
            }
            int count = 1 + upper.getValue() - lower.getValue();
            return String.valueOf(count);
        }
    }
}
