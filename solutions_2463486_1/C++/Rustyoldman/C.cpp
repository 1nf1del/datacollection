// ****************************************************************************
// Code developed starting from Rustyoldman's Google Code jam template
// ****************************************************************************
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <list>
#include <cstdlib>
#define enld endl
using namespace std ;
// ****************************************************************************
int getchar ( )
// ****************************************************************************
{
if ( cin.eof() )
   return -1 ;
int ch = cin.get() ;
if ( cin.fail() )
   return -1 ;
return ch ;
}
// ****************************************************************************
string tokenstartchars 
= "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" ;
string tokenchars 
= ".0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" ;
// ****************************************************************************
string gettoken ( )
// ****************************************************************************
{
int ch ;

ch = cin.get() ;

while ( ! cin.eof () && (ch == ' ' || ch == '\n') )
   ch = getchar ( ) ;

if ( ch == -1 )
   return "ERROR" ;

string ans = "" ;
if ( tokenstartchars.find( (char) ch ) != string::npos ) 
   {
   while ( tokenchars.find ( (char) ch ) != string::npos)
      {
      ans.push_back((char) ch) ;
      ch = getchar ( ) ;
      }
   cin.putback((char)ch) ;
   return ans ;
   }

ans = "" ;
ans.push_back ( (char) ch ) ;
return ans ;
}
// ****************************************************************************
double getdouble ( ) 
// ****************************************************************************
{
double a ;
cin >> a ;
return a ;
}
// ****************************************************************************
int getint ( ) 
// ****************************************************************************
{
while ( cin.peek ( ) == ' ' || cin.peek ( ) == '\n' )
   getchar ( ) ;
int sign = 1 ;
if ( cin.peek ( ) == '-' )
   {
   sign = -1 ;
   getchar ( ) ;
   }
string toke = gettoken ( ) ;
if ( sign == -1 && toke == "2147483648" )
   return -2147483648 ;

return sign * atoi ( toke.c_str() ) ;
}
// ****************************************************************************
int pal ( long p )
// ****************************************************************************
{
char buf [100] ;
sprintf ( buf , "%ld" , p ) ;
int n = strlen ( buf ) ;

for ( int i = 0 ; i < n ; ++ i )
   if ( buf[i] != buf[ n - i - 1 ] )
        return 0 ;
return 1 ;
}

// ****************************************************************************
void do_case ( int case_number )
// ****************************************************************************
{
long a , b ;
cin >> a >> b ;
int c = 0 ;

// long r = 1 ;
// while ( r*r <= b )
//    {
//    if ( r*r >= a && pal ( r ) && pal ( r*r ) )
//       {
//       c++ ;
//       cout << "if ( a <= " << r*r << "L && b >= " << r*r << "L ) c++ ; " << endl ;
//       }
//    ++ r ;
//    }
// cout << c << endl ;

if ( a <= 1L && b >= 1L ) c++ ; 
if ( a <= 4L && b >= 4L ) c++ ; 
if ( a <= 9L && b >= 9L ) c++ ; 
if ( a <= 121L && b >= 121L ) c++ ; 
if ( a <= 484L && b >= 484L ) c++ ; 
if ( a <= 10201L && b >= 10201L ) c++ ; 
if ( a <= 12321L && b >= 12321L ) c++ ; 
if ( a <= 14641L && b >= 14641L ) c++ ; 
if ( a <= 40804L && b >= 40804L ) c++ ; 
if ( a <= 44944L && b >= 44944L ) c++ ; 
if ( a <= 1002001L && b >= 1002001L ) c++ ; 
if ( a <= 1234321L && b >= 1234321L ) c++ ; 
if ( a <= 4008004L && b >= 4008004L ) c++ ; 
if ( a <= 100020001L && b >= 100020001L ) c++ ; 
if ( a <= 102030201L && b >= 102030201L ) c++ ; 
if ( a <= 104060401L && b >= 104060401L ) c++ ; 
if ( a <= 121242121L && b >= 121242121L ) c++ ; 
if ( a <= 123454321L && b >= 123454321L ) c++ ; 
if ( a <= 125686521L && b >= 125686521L ) c++ ; 
if ( a <= 400080004L && b >= 400080004L ) c++ ; 
if ( a <= 404090404L && b >= 404090404L ) c++ ; 
if ( a <= 10000200001L && b >= 10000200001L ) c++ ; 
if ( a <= 10221412201L && b >= 10221412201L ) c++ ; 
if ( a <= 12102420121L && b >= 12102420121L ) c++ ; 
if ( a <= 12345654321L && b >= 12345654321L ) c++ ; 
if ( a <= 40000800004L && b >= 40000800004L ) c++ ; 
if ( a <= 1000002000001L && b >= 1000002000001L ) c++ ; 
if ( a <= 1002003002001L && b >= 1002003002001L ) c++ ; 
if ( a <= 1004006004001L && b >= 1004006004001L ) c++ ; 
if ( a <= 1020304030201L && b >= 1020304030201L ) c++ ; 
if ( a <= 1022325232201L && b >= 1022325232201L ) c++ ; 
if ( a <= 1024348434201L && b >= 1024348434201L ) c++ ; 
if ( a <= 1210024200121L && b >= 1210024200121L ) c++ ; 
if ( a <= 1212225222121L && b >= 1212225222121L ) c++ ; 
if ( a <= 1214428244121L && b >= 1214428244121L ) c++ ; 
if ( a <= 1232346432321L && b >= 1232346432321L ) c++ ; 
if ( a <= 1234567654321L && b >= 1234567654321L ) c++ ; 
if ( a <= 4000008000004L && b >= 4000008000004L ) c++ ; 
if ( a <= 4004009004004L && b >= 4004009004004L ) c++ ; 
if ( a <= 100000020000001L && b >= 100000020000001L ) c++ ; 
if ( a <= 100220141022001L && b >= 100220141022001L ) c++ ; 
if ( a <= 102012040210201L && b >= 102012040210201L ) c++ ; 
if ( a <= 102234363432201L && b >= 102234363432201L ) c++ ; 
if ( a <= 121000242000121L && b >= 121000242000121L ) c++ ; 
if ( a <= 121242363242121L && b >= 121242363242121L ) c++ ; 
if ( a <= 123212464212321L && b >= 123212464212321L ) c++ ; 
if ( a <= 123456787654321L && b >= 123456787654321L ) c++ ; 
if ( a <= 400000080000004L && b >= 400000080000004L ) c++ ; 



cout << "Case #" << case_number << ": " << c ;
cout << endl ;
}
// ****************************************************************************
int main ( int argc , char ** argv )
// ****************************************************************************
{
int n ;
cin >> n ; getchar() ;
for ( int i = 1 ; i <= n ; i ++ )
   do_case ( i ) ;
}
// ****************************************************************************
