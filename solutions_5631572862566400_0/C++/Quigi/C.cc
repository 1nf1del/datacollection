// 2016 Round 1A, Problem C. BFFs// Copyright 2016 Christian Brechbuehler alias Quigi// using gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1)#include <iostream>#include <vector>static int read_int() {         // convenience function  int i;  std::cin >> i;  return i;}typedef std::vector<int> VI;static int do_case() {  const int N = read_int();  VI f(N), round(N), len(N);    // just right  std::vector<bool> to_pair(2);  for (int j = 0; j < N; ++j)    f[j] = read_int() - 1;      // to C zero based  for (int j = 0; j < N; ++j)   // mark pairs as round 1    round[j] = len[j] = f[f[j]] == j;  to_pair[1] = true;            // there might not be any  int i_r = 1, best = 2;        // there must be at least a 2-cycle  for (int j = 0; j < N; ++j) {    if (!round[j]) {      const int i_r = to_pair.size();      int i=j, l=0, contend = 0;      do { // chase friend chain        round[i] = i_r;        len[i] = ++l;        i = f[i];      } while (!round[i]);      // been here before      if (round[i] == i_r) {    // new loop > 2        contend = l - len[i];        to_pair.push_back(false);      } else {        const bool ok = to_pair[round[i]];        to_pair.push_back(ok);        if (ok) {          while (l >= len[i] && round[i] > 1) {            len[i] = ++l;            i = f[i];          }          if (round[i] == 1) {            if (l >= len[i]) {              len[i] = ++l;              contend = l + len[f[i]];            }          }        }      }      if (contend > best) best = contend;    }  }  return best;}int main() {  const int T = read_int();  for (int j = 1; j <= T; ++j) {    std::cout << "Case #" << j << ": "              << do_case()              << std::endl;  }  return 0;}