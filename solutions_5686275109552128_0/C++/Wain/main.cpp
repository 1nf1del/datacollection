//
//  main.cpp
//  CodeJam2015

#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <cmath>

using namespace std;

bool sortfunc(int i, int j) { return (i>j); }

/*
 다시 정리.
 
 최대값 x가 있다.
 
 9, 5, 5, 5, ... : 나누면 3, 3(1), 3(2), 5, 5, 5.. 해서 7초. 5, 4(1), 5, 5, 5... 해서 6초
 4, 8 : 나누면 4, 4, 4(1) = 5초.
 4, 3, 2, 1 : 4초.
 1, 9, 2, 5 : 1, 5, 4(1), 2, 5.. 6초.
 7, 5, 2 : 3, 3(1), 1(2), 3, 2(3), 2.. 6초 / 4, 3(1), 3, 2(2), 2.. 6초
 6, 3, 9 : 3, 3(1), 3(2), 3, 3(3), 3.. 6초
 7, 6, 4 : 4, 3(1), 3, 3(2), 4.. 6초.
 8, 8, 8 : 4, 4(1), 4, 4(2), 4, 4(3).. 7초.
 4 : 2, 2(1)... 3초
 8, 9, 1, 1 : 4, 4(1), 3, 3(2), 3(3), 1, 1... 7초    1+ 7, 8 // 1+ 3, 4(1), 4, 4(2) = 7초.
        마찬가지로 9, 8, 1, 1 : 5, 4(1), 4, 4(2), 1, 1... 7초.
 2, 6, 6, 6 : 2, 3, 3(1), 3, 3(2), 3, 3(3) = 6초
 5, 1, 1, 5, 1 : 3, 2(1), 1, 1, 3, 2(2), 1 : 5초 
 3, 4, 4, 6 : 3, 4, 4, 3, 3(1) : 5초 
 6, 5, 4, 3, 2, 1 : 6초
 
 
 
 9 : 3, 3(1), 3(2) = 9 = 3^2? : 5초.
 16 : 4, 4(1), 4(2), 4(3) = 7초? 3, 3(1), 3(2), 3(3), 3(4), 1(5) = 8초 
 25 : 5, 5(1), 5(2), 5(3), 5(4) = 9초? 3*8+1
 36 : 6, 6(1), 6(2), ... 6(5) = 11초? 4, 4(1), 4(2)... 4(8): ..12초? 3, 3(1), 3(2), ... 3(11) = 14초?
 81 : 9, 9, 9, ... 9(8) = 17초. 
 
 81 : 11, 11(1), 11(2), 11/3, 11/4, 11/5, 11/6, 11-7/7 = 18초.
 81 : 12, 12(1), 12(2), 12(3), 12(4), 12(5), 9(6) = 18초.
 
 
 16, 9 : 4, 4, 4, 4(3), 3, 3, 3(2) = 5초, +4 = 9초
 36, 9 : 6, 6, 6, 6, 6, 6(5), 3, 3, 3(2) = 7초, 13초.
 
 81, 9 : 9, 9, 9, ... 9(8), 9 : 17초
 
 81, 11 : 9,9,9,9,9,9,9,9(8), 11 : 19초.
 81, 11 : 9,9,9,9,9,9,9,9(8), 6, 5(9) : 18초. ???????
 81, 11 : 11, 11....11-7(7), 11 : 18초.
 
 81, 8 : 8, .... 8, 8-7(10), 8 : 18초.
 81, 8 : 9, .... 9(8), 8: 17초.
 
 81, 10 : 9.....9(8), 10 : 18초.
 81, 10 : 10.....10(8), 10 :18초.
 81, 10 : 11....11-7(7), 10: 18초.
 81, 10 : 12....12-3(6), 10: 18초.
 
 81, 81 : 9,9....9(8), 9,9...9(16) = 25초.
 81, 81 : 12...12(6), 12...12(12) = 24초. <= 이거.
 81, 81 : 14...14(5), 14...14(10) = 24초. <= 이것도.
 81, 81 : 15...15(5), 15...15(10) = 25초.
 81, 81 : 17...17(4), 17...17(8) = 25초.
 
 81: 9+(9-1)*1 = 17초
 81, 81: 12+(7-1)*2 = 24초
 81, 81, 81: 14+(6-1)*3 = 29초
 
 81, 81, 81: 14...14(5), 14..14(10), 14..14(15) = 29초
 81, 81, 81: 12...12(6), 12..12(12), 12..12(18) = 30초

 81/12 = 6.75>7-1 = 6
 81/12 = 6.75>7-1 = 6
 81/12 = 6.75>7-1 = 6 
 12 + 6*3 = 30

 81/14 = 5.78>6-1 = 5
 14 + 5*3 = 29
 
 81 < 17*5, 18*5            (4회)
    < 14*6, 15*6, 16*6      (5회)
    < 12*7, 13*7            (6회)
    < 11*8                  (7회)
    < 10*9, 9*9             (8회)
 
 81, 81, 81, 36: 14...14(15), 14, 14, ?(17) = 31초.
 81, 81, 81, 36: 12...12(18), 12, 12, 12(21) = 33초.
 81, 81, 81, 36: 17...17(12), 17, 17, ?(14) = 31초
 81, 81, 81, 36: 18...18(12), 18, 18(13) = 31초.
 
 81/15 = 5.4>6-1 = 5
 36/15 = 2.4>3-1 = 2
 5+5+5+2+15 = 32
 
 81/14 = 5.78>6-1 = 5
 36/14 = 2.57>3-1 = 2
 5*3+2+14 = 31
 
 81, 16 : 17...17(4), 16 = 21초
 81, 16 : 15...15(5), 15, 1(6) = 21초
 81, 16 : 12...12(6), 12, 4(7) = 19초
 81, 16 : 8....8(10), 8, 8(11) = 19초
 
 81, 16 : 7....7(11), 7, 7(12), 7(13) = 20초
 
 81, 14 : 12...12(6), 12, 2(7) = 19초
 81, 14 : 7....7(11), 7, 7(12) = 19초
 
 81 : 9...9(8) = 17초.
 81, 9, 9, 9, 9, 9.. = 17초
 72, 18 : 9...9(7), 9, 9(8) = 17초
 63, 18, 18 : 9...9(6), 9, 9(7), 9, 9(8) = 17초
 54, 18, 18, 18 : 9...9(5), 9, 9(6)/.../9, 9(8) = 17초
 45, 18, 18, 18, 18
 36, 18, 18, 18, 18, 18
 27, 18, 18, 18, 18, 18, 18
 18, 18, 18, 18, 18, 18, 18, 18 
 
 81, 16 : 19초.
 72, 18, 16 : 12..12(5), 12, 6(6), 12, 4(7) : 19초.
 63, 18, 16 : 12/12/12/12/12/3(5), 12, 6(6), 12, 6(7), 12, 4(8) : 20초.
 
 
 
 최종 결과값은...
 
 x1, x2, x3...

 (x1/y1의 올림-1) + (x2/y2의 올림-1) + (x3/y3의 올림-1) + .... + max(y1, y2, y3 ... )
 
 1) 최고값인 놈을 산산조각낸다: 루트를 기반으로.
 2) 루트값보다 큰 놈으로 산산조각내서 테스트해본다. 되는지. 값이 증가하기 시작한다면 아닌거야.
 
 
 땡.
 1) 최고값인 놈을 산산조각낸다: 루트를 기반으로.
 9, 6, 3 : 3, 3(1), 3(2), 6, 3
 2) 그 값보다 높은 놈도 그 값을 기반으로 산산조각낸다.
 3, 3(1), 3(2), 3, 3(3), 3 = 6초 : 정답
 
 
 땡.
 1) 최고값 확인.
 2) 최고값의 개수는? 9가 한개.
 3) 그럼 9를 뭘로 나눌까? 다음 최고값으로 나눠보자. 6.
 4) 6, 6, 3, 3 (1), 최고값은 6, 더하면 7 최고값의 개수는 2개
 5) 다음 최고값으로 나눠보자 3
 6) 3, 3, 3, 3, 3, 3 (3), 최고값은 3, 더하면 6 여기서 스탑.
 
 */

void runQuestion(int number)
{
    int result = 0;
    int input_maxNum;
    int target[1280];
    // 1024>512*2+1>256*4+3>128*8+7>64*16+15>32*32+31
    // 1024*n > 32*32*n + 31*n
    // max range :: 1024 > 1000 // additionally - 128
    cin >> input_maxNum;
    for ( int i = 0 ; i < input_maxNum ; i++) {
        cin >> target[i];
    }

    vector<double> myvector( target, target+input_maxNum );
    sort(myvector.begin(), myvector.end(), sortfunc);

    int minimalValue = myvector[0];
    int currentValue = 0;

    for ( double i = 2; i < myvector[0] ; i++ ) {
        currentValue = 0;
        for ( int j = 0 ; j < myvector.size() ; j++ ) {
            currentValue += ceil(myvector[j]/i)-1;
//            cout << i << ":" << myvector[j] << ":" << ceil(myvector[j]/i)-1 << endl;
        }
        currentValue += i;
        if ( minimalValue > currentValue )
            minimalValue = currentValue;
    }
    result = minimalValue;

//    for ( int i = 0 ; i < myvector.size() ; i++ ) {
//        cout << i << ":" << myvector[i] << endl;
//    }
    cout << "Case #" << number << ": " << result;
    cout << endl;
}

int main(int argc, const char * argv[]) {
    
    int howManyTimes;
    
    scanf("%d", &howManyTimes);
    
    for ( int i = 0 ; i < howManyTimes ; i++ ) {
        runQuestion(i+1);
    }

    return 0;
}

