import java.util.*;public class b2 {	static int n;	static int[] a,b;	static int[][] memo;	public static void main(String[] args) {		Scanner in = new Scanner(System.in);		int T = in.nextInt();		for(int t=1; t<=T; t++) {			System.out.printf("Case #%d: ", t);			n = in.nextInt();			a = new int[n];			b = new int[n];			memo = new int[1<<n][1<<n];			for(int i=0; i<n; i++) {				a[i] = in.nextInt();				b[i] = in.nextInt();			}			for(int[] x : memo) Arrays.fill(x,-1);			int ret = go(0,0);			if(ret >= 10000) System.out.println("Too Bad");			else System.out.println(ret);		}	}	static int go(int usedA, int usedB) {		if(memo[usedA][usedB] != -1) return memo[usedA][usedB];		if(Integer.bitCount(usedB) == n) return memo[usedA][usedB] = 0;		int count = Integer.bitCount(usedA) + Integer.bitCount(usedB);		int best = 10000;		for(int i=0; i<n; i++) {			if(count >= a[i] && !isSet(usedA,i))				best = Math.min(best,1+go(set(usedA,i),usedB));			if(count >= b[i] && !isSet(usedB,i))				best = Math.min(best,1+go(set(usedA,i),set(usedB,i)));		}		return memo[usedA][usedB] = best;	}	static boolean isSet(int x, int p) {		return (x&(1<<p)) != 0;	}	static int set(int x, int p) {		return x|(1<<p);	}}